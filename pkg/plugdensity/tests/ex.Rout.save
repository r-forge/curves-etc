
R version 4.1.2 Patched (2022-02-19 r81767) -- "Bird Hippie"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library("plugdensity")
> 
> options(digits = 6)
> 
> data(faithful)
> (pd.geys <- plugin.density(faithful$waiting))
EvaHerrmann plugin density estimate
 call : plugin.density(x = faithful$waiting) 
 n =  272  ;  estimated (Gaussian) bandwidth h =  2.54455 
List of 2
 $ x: num [1:201] 37.7 38.018 38.336 38.654 38.972 39.29 39.608 39.926 40.244 40.562 ...
 $ y: num [1:201] 0.000111744 0.000151533 0.000203187 0.000269417 0.000353343 ...
> pd.geys$y * 1e4
  [1]   1.117438   1.515325   2.031866   2.694171   3.533434   4.584508
  [7]   5.885200   7.475970   9.398591  11.695021  14.404790  17.563980
 [13]  21.202617  25.341456  29.990990  35.148944  40.798425  46.908014
 [19]  53.431666  60.309686  67.471463  74.838464  82.327956  89.857663
 [25]  97.350070 104.736228 111.959508 118.977875 125.764586 132.308631
 [31] 138.612918 144.692025 150.568083 156.267752 161.817540 167.239894
 [37] 172.549565 177.750719 182.834321 187.777339 192.542233 197.077491
 [43] 201.319806 205.196838 208.630791 211.543507 213.861567 215.521642
 [49] 216.476138 216.697763 216.182952 214.953957 213.058690 210.568604
 [55] 207.574323 204.179772 200.494859 196.627558 192.676586 188.724778
 [61] 184.834302 181.044437 177.371564 173.811195 170.343138 166.936639
 [67] 163.556748 160.170725 156.753046 153.288311 149.773080 146.215547
 [73] 142.632388 139.046173 135.481059 131.958862 128.495454 125.100153
 [79] 121.774649 118.514068 115.311134 112.158916 109.054736 106.005693
 [85] 103.030750 100.162458  97.449126  94.952477  92.744581  90.905217
 [91]  89.516818  88.658197  88.401059  88.805735  89.917765  91.766036
 [97]  94.364309  97.711743 101.794747 106.592572 112.079971 118.230266
[103] 125.020242 132.431376 140.449885 149.068332 158.282651 168.089087
[109] 178.482351 189.450051 200.969292 213.003349 225.498867 238.383007
[115] 251.563755 264.930097 278.354269 291.694956 304.802693 317.525304
[121] 329.714145 341.231903 351.958276 361.795505 370.672958 378.548389
[127] 385.407222 391.260317 396.137652 400.081329 403.137056 405.345496
[133] 406.734121 407.311332 407.062966 405.951723 403.920407 400.897955
[139] 396.808033 391.579222 385.156074 377.508926 368.642399 358.601310
[145] 347.472547 335.383977 322.500059 309.013155 295.133788 281.078857
[151] 267.059392 253.269248 239.875158 227.009645 214.765819 203.196320
[157] 192.315084 182.101070 172.505087 163.458095 154.878983 146.683594
[163] 138.792785 131.137612 123.664346 116.337505 109.138747 102.066446
[169]  95.133835  88.363293  81.783742  75.427064  69.323067  63.497894
[175]  57.971685  52.758020  47.863088  43.286628  39.023527  35.063854
[181]  31.395047  28.003631  24.875004  21.995029  19.351193  16.931215
[187]  14.724159  12.720631  10.911215   9.287033   7.839592   6.559653
[193]   5.437551   4.463399   3.626153   2.914392   2.316229   1.819632
[199]   1.412491   1.082946   0.819937
> 
> data(co2)
> (pd.co2 <- plugin.density(co2))
EvaHerrmann plugin density estimate
 call : plugin.density(x = co2) 
 n =  468  ;  estimated (Gaussian) bandwidth h =  2.76466 
List of 2
 $ x: num [1:201] 307.814 308.136 308.458 308.78 309.102 ...
 $ y: num [1:201] 0.000281426 0.000372771 0.000488529 0.000633515 0.000813032 ...
> 
> ## Add one outlier to co2, move it to Inf --- bw.EH() is quite *robust*
> xOs <- c(max(co2), 370+ 2^c(0:8, 16*(1:6)), Inf)
> bwOs <- vapply(xOs, function(xo) bw.EH( c(co2, xo)), 0.1)
> bwOm <- vapply(xOs, function(xo) bw.EH(-c(co2, xo)), 0.1)
> cbind(xOs, bwOs, D = bwOs - bwOs[length(xOs)], bwOm)
              xOs    bwOs            D    bwOm
 [1,] 3.66840e+02 2.77391  8.09856e-03 2.77311
 [2,] 3.71000e+02 2.77250  6.69337e-03 2.77170
 [3,] 3.72000e+02 2.77010  4.29200e-03 2.76930
 [4,] 3.74000e+02 2.76576 -5.04374e-05 2.76496
 [5,] 3.78000e+02 2.76330 -2.51013e-03 2.76250
 [6,] 3.86000e+02 2.76517 -6.38544e-04 2.76438
 [7,] 4.02000e+02 2.76600  1.92396e-04 2.76521
 [8,] 4.34000e+02 2.76581  3.02989e-07 2.76501
 [9,] 4.98000e+02 2.76581  0.00000e+00 2.76501
[10,] 6.26000e+02 2.76581  0.00000e+00 2.76501
[11,] 6.59060e+04 2.76581  0.00000e+00 2.76501
[12,] 4.29497e+09 2.76581  0.00000e+00 2.76501
[13,] 2.81475e+14 2.76581  0.00000e+00 2.76501
[14,] 1.84467e+19 2.76581  0.00000e+00 2.76501
[15,] 1.20893e+24 2.76581  0.00000e+00 2.76501
[16,] 7.92282e+28 2.76581  0.00000e+00 2.76501
[17,]         Inf 2.76581  0.00000e+00 2.76501
> plot(bwOs ~ xOs, log="x", type="b")
> plot (bwOs ~ xOs, log="x", type="b", subset = xOs < 4e4)
> lines(bwOm ~ xOs, col=2, type="b")
> 
> proc.time()
   user  system elapsed 
  0.317   0.026   0.336 
